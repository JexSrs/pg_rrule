-- Extension management
DROP EXTENSION pg_rrule cascade;
CREATE EXTENSION pg_rrule;
SET client_min_messages = NOTICE;
SET log_min_messages = NOTICE;

-- Simple tests
SELECT rrule_in('FREQ=WEEKLY;INTERVAL=1;UNTIL=20251231T235959Z;BYDAY=MO,WE,FR;BYHOUR=9;BYMINUTE=0;BYSECOND=0');
SELECT rrule_out(rrule_in('FREQ=WEEKLY;INTERVAL=1;UNTIL=20251231T235959Z;BYDAY=MO,WE,FR;BYHOUR=9;BYMINUTE=0;BYSECOND=0'));

SELECT get_freq('FREQ=DAILY;INTERVAL=1;UNTIL=2026-01-01T00:00:00Z;BYHOUR=12;BYMINUTE=10;BYSECOND=11');
SELECT get_until('FREQ=WEEKLY;INTERVAL=1;UNTIL=20251231T235959Z;BYDAY=MO,WE,FR;BYHOUR=9;BYMINUTE=0;BYSECOND=0');
SELECT get_untiltz('FREQ=WEEKLY;INTERVAL=1;UNTIL=20251231T235959Z;BYDAY=MO,WE,FR;BYHOUR=9;BYMINUTE=0;BYSECOND=0');
SELECT get_count('FREQ=WEEKLY;INTERVAL=1;UNTIL=20251231T235959Z;BYDAY=MO,WE,FR;BYHOUR=9;BYMINUTE=0;BYSECOND=0');
SELECT get_interval('FREQ=DAILY;INTERVAL=2;UNTIL=2026-01-01T00:00:00Z;BYHOUR=12;BYMINUTE=10;BYSECOND=11');

SELECT unnest(get_bysecond('FREQ=DAILY;INTERVAL=1;UNTIL=2026-01-01T00:00:00Z;BYHOUR=12;BYMINUTE=10;BYSECOND=11,15,45'));
SELECT get_byminute('FREQ=DAILY;INTERVAL=1;UNTIL=2026-01-01T00:00:00Z;BYHOUR=12;BYMINUTE=10;BYSECOND=11,15,45');
SELECT unnest(get_byminute('FREQ=DAILY;INTERVAL=1;UNTIL=2026-01-01T00:00:00Z;BYHOUR=12;BYSECOND=11,15,45'));
SELECT get_byhour('FREQ=DAILY;INTERVAL=1;UNTIL=2026-01-01T00:00:00Z;BYHOUR=12;BYSECOND=11,15,45');
SELECT get_byday('FREQ=DAILY;INTERVAL=1;UNTIL=2026-01-01T00:00:00Z;BYDAY=MO,TH;BYHOUR=12;BYSECOND=11,15,45');
SELECT get_bymonthday('FREQ=DAILY;INTERVAL=1;UNTIL=2026-01-01T00:00:00Z;BYMONTHDAY=15,16,17;BYHOUR=12;BYSECOND=0');
SELECT get_byyearday('FREQ=YEARLY;BYYEARDAY=1,100,200');
SELECT get_byweekno('FREQ=YEARLY;BYWEEKNO=1,34');
SELECT get_bymonth('FREQ=YEARLY;BYMONTH=6');
SELECT get_bysetpos('FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR;BYSETPOS=1,-1');
SELECT get_wkst('FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR;BYSETPOS=1,-1');
SELECT get_wkst('FREQ=YEARLY;BYMONTH=6');
SELECT get_wkst('FREQ=YEARLY;BYMONTH=6;WKST=SU');

SELECT *
FROM unnest(get_occurrences(
        'FREQ=DAILY;INTERVAL=1;BYHOUR=12;BYMINUTE=0;BYSECOND=0'::rrule,
        '2025-01-01 00:00:00+00'::timestamp,
        '2026-01-01 00:00:00+00'::timestamp
            ));

SELECT *
FROM unnest(get_occurrences(
        'FREQ=DAILY;INTERVAL=1;BYHOUR=12;BYMINUTE=0;BYSECOND=0'::rrule,
        '2025-01-01 00:00:00+00'::timestamp with time zone,
        '2026-01-01 00:00:00+00'::timestamp with time zone
            ));

SELECT 'FREQ=DAILY;INTERVAL=1;BYHOUR=12;BYMINUTE=0;BYSECOND=0'::rrule =
       'FREQ=DAILY;INTERVAL=1;BYHOUR=12;BYMINUTE=0;BYSECOND=0'::rrule;
SELECT 'FREQ=DAILY;INTERVAL=1;BYHOUR=12;BYMINUTE=0;BYSECOND=0'::rrule =
       'FREQ=DAILY;INTERVAL=1;BYHOUR=12;BYMINUTE=0;BYSECOND=1'::rrule;
SELECT 'FREQ=DAILY;INTERVAL=1;BYHOUR=12;BYMINUTE=0;BYSECOND=0'::rrule !=
       'FREQ=DAILY;INTERVAL=1;BYHOUR=12;BYMINUTE=0;BYSECOND=0'::rrule;
SELECT 'FREQ=DAILY;INTERVAL=1;BYHOUR=12;BYMINUTE=0;BYSECOND=0'::rrule !=
       'FREQ=DAILY;INTERVAL=1;BYHOUR=12;BYMINUTE=0;BYSECOND=1'::rrule;


-- Table tests
DROP TABLE IF EXISTS public.event;
DROP TABLE IF EXISTS public.event2;
CREATE TABLE public.event
(
    "id"    SERIAL PRIMARY KEY NOT NULL,
    "rrule" rrule              NOT NULL
);
CREATE TABLE public.event2
(
    "id"    SERIAL PRIMARY KEY NOT NULL,
    "rrule" rrule              NOT NULL
);

INSERT INTO public.event (rrule) VALUES ('FREQ=DAILY;INTERVAL=1;BYHOUR=9;BYMINUTE=0;BYSECOND=0'::rrule);
INSERT INTO public.event (rrule) VALUES ('FREQ=WEEKLY;BYDAY=MO,WE,FR;BYHOUR=10;BYMINUTE=0;BYSECOND=0'::rrule);
INSERT INTO public.event (rrule) VALUES ('FREQ=MONTHLY;BYDAY=1MO;BYHOUR=11;BYMINUTE=0;BYSECOND=0'::rrule);

SELECT * FROM public.event;

-- Test send/recv
COPY public.event TO '/tmp/test.dat' WITH BINARY;
COPY public.event2 FROM '/tmp/test.dat' WITH BINARY;

SELECT * FROM public.event2; -- should be same data as public.event

-- Test functions in saved data
SELECT *, get_byhour(event.rrule)
FROM public.event event;

SELECT *, rrule_out(event.rrule)
FROM public.event event;

SELECT *
FROM public.event event
WHERE event.rrule = 'FREQ=DAILY;INTERVAL=1;BYHOUR=9;BYMINUTE=0;BYSECOND=0'::rrule;

-- occurrences checks
SELECT event.id, COUNT(*) as occurrence_count
FROM public.event event
CROSS JOIN LATERAL unnest(get_occurrences(
        event.rrule,
        '2025-01-01 00:00:00+00'::timestamp with time zone,
        '2026-01-01 00:00:00+00'::timestamp with time zone
)) as occurrences
GROUP BY event.id;

SELECT event.id, unnest(occurrences)
FROM public.event event
CROSS JOIN LATERAL get_occurrences(
        event.rrule,
        '2025-01-01 00:00:00+00'::timestamp with time zone,
        '2026-01-01 00:00:00+00'::timestamp with time zone
) as occurrences;